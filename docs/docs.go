// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/person": {
            "get": {
                "description": "Mendapatkan semua orang yang telah terdaftar",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Mendapatkan semua orang yang telah terdaftar",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetAllPersonsResponse"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Mendaftarkan/membuat satu orang",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Mendaftarkan/membuat satu orang",
                "parameters": [
                    {
                        "description": "Person",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CreatePersonResponse"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/person/{id}": {
            "get": {
                "description": "Mendapatkan satu orang yang telah terdaftar dengan id",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Mendapatkan satu orang yang telah terdaftar dengan id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetOnePersonResponse"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Mengupdate satu orang yang sudah terbuat",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Mengupdate satu orang yang sudah terbuat",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Person",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UpdatePersonResponse"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Menghapus user yang sudah dibuat berdasarkan id",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Menghapus user yang sudah dibuat berdasarkan id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.DeletePersonResponse"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Person": {
            "type": "object",
            "properties": {
                "firstName": {
                    "description": "gorm.Model\nPost FirstName\n@Column(type:string)",
                    "type": "string"
                },
                "lastName": {
                    "description": "Post LasttName\n@Column(type:string)",
                    "type": "string"
                }
            }
        },
        "request.CreatePersonRequest": {
            "type": "object",
            "required": [
                "first_name"
            ],
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "request.UpdatePersonRequest": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "response.CreatePersonResponse": {
            "type": "object",
            "properties": {
                "http_code": {
                    "type": "integer"
                },
                "payload": {
                    "$ref": "#/definitions/model.Person"
                }
            }
        },
        "response.DeletePersonResponse": {
            "type": "object",
            "properties": {
                "http_code": {
                    "type": "integer"
                },
                "payload": {
                    "type": "string"
                }
            }
        },
        "response.GetAllPersonsResponse": {
            "type": "object",
            "properties": {
                "http_code": {
                    "type": "integer"
                },
                "payload": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Person"
                    }
                }
            }
        },
        "response.GetOnePersonResponse": {
            "type": "object",
            "properties": {
                "http_code": {
                    "type": "integer"
                },
                "payload": {
                    "$ref": "#/definitions/model.Person"
                }
            }
        },
        "response.UpdatePersonResponse": {
            "type": "object",
            "properties": {
                "http_code": {
                    "type": "integer"
                },
                "payload": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
